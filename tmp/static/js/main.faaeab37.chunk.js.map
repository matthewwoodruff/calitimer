{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["SecondsInput","value","onChange","type","min","e","Number","target","buildStatus","currentTime","active","rest","sets","setTime","remainder","set","Math","floor","inActivePhase","time","state","complete","next","nextTime","defaultActivity","defaultStatus","App","useState","running","setRunning","paused","setPaused","activity","setActivity","status","setStatus","inActivity","stop","useEffect","intervalId","setTimeout","clearTimeout","updateActivity","className","moment","format","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mQAyBA,SAASA,EAAT,GAAsD,IAA/BC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,SAC1B,OACI,2BAAOC,KAAK,SACLF,MAAOA,EAAQ,IACfG,IAAK,EACLF,SAAU,SAAAG,GAAC,OAAIH,EAAkC,IAAzBI,OAAOD,EAAEE,OAAON,WAIvD,IAAMO,EAAc,SAAdA,EAAeC,EAAD,GAAkE,IAA3CC,EAA0C,EAA1CA,OAAQC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,KAC/CC,EAAUH,EAASC,EACnBG,EAAYL,EAAcI,EAC1BE,EAAMC,KAAKC,MAAMR,EAAcI,GAAW,EAC1CK,EAAgBJ,GAAaJ,EACnC,MAAO,CACHS,KAAMT,EAASI,GAAaI,EAAgB,EAAIP,GAChDS,MAAOF,EAAgB,SAAW,OAClCG,SAAUT,EAAO,IAAMG,EACvBA,MACAO,KAAM,SAACC,GAAD,OAAcf,EAAYC,EAAcc,EAAU,CAACb,SAAQC,OAAMC,YAIzEY,EAAkB,CACpBZ,KAAM,GACNF,OAAQ,IACRC,KAAM,KAGJc,EAAgBjB,EAAY,EAAGgB,GA0EtBE,MAxEf,WAAgB,IAAD,EACmBC,oBAAS,GAD5B,mBACJC,EADI,KACKC,EADL,OAEiBF,oBAAS,GAF1B,mBAEJG,EAFI,KAEIC,EAFJ,OAGqBJ,mBAASH,GAH9B,mBAGJQ,EAHI,KAGMC,EAHN,OAIiBN,mBAASF,GAJ1B,mBAIJS,EAJI,KAIIC,EAJJ,KAMLC,EAAaR,GAAWE,EAExBO,EAAO,WACTF,EAAUV,GACVM,GAAU,GACVF,GAAW,IAGfS,qBAAU,WACN,GAAIJ,EAAOb,SACPgB,SAIJ,GAAIT,EAAS,CACT,IAAMW,EAAaC,YAAW,WAC1BL,GAAU,SAAAD,GAAM,OAAIA,EAAOZ,KA1E1B,eA4EL,OAAO,kBAAMmB,aAAaF,OAI/B,CAACX,EAASM,IAEb,IAQMQ,EAAiB,SAACV,GACpBG,EAAU3B,EAAY,EAAGwB,IACzBC,EAAYD,IAQTtB,EAAsBsB,EAAtBtB,OAAQC,EAAcqB,EAAdrB,KAAMC,EAAQoB,EAARpB,KAEdO,EAAoBe,EAApBf,KAAMC,EAAcc,EAAdd,MAAOL,EAAOmB,EAAPnB,IAEpB,OACI,yBAAK4B,UAAS,OACV,yBAAKA,UAAS,qBAAgBP,EAAahB,EAAQ,KAC/C,yBAAKuB,UAAU,QAAQC,IAAOzB,GAAM0B,OAAO,UAC3C,yBAAKF,UAAU,OAAO5B,EAAtB,IAA4BH,IAEhC,4BAAQkC,QA5BD,WACPV,EACAC,IAEAR,GAAW,KAwBeO,EAAa,OAAS,SAC/CA,GAAc,4BAAQU,QAhBX,WAChBf,GAAWD,GACXD,GAAYD,KAcsCE,EAAS,SAAW,UAChEM,GAAc,4CACP,2BAAOjC,KAAK,SACLF,MAAOW,EACPR,IAAK,EACLF,SAAU,SAAAG,GAAC,OAAIqC,EAAe,CAAC9B,KAAMN,OAAOD,EAAEE,OAAON,OAAQS,SAAQC,YAJrE,UAKL,kBAACX,EAAD,CAAcC,MAAOS,EAAQR,SAAU,SAAAD,GAAK,OAAIyC,EAAe,CAAChC,OAAQT,EAAOW,OAAMD,YALhF,QAMP,kBAACX,EAAD,CAAcC,MAAOU,EAAMT,SAAU,SAAAD,GAAK,OAAIyC,EAAe,CAAC/B,KAAMV,EAAOS,SAAQE,eC9GpFmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.faaeab37.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport moment from \"moment\";\nimport './App.css';\n\nconst interval = 1000;\n\ninterface InputProps {\n    value: number;\n    onChange: (a: number) => void;\n}\n\ninterface Activity {\n    sets: number;\n    active: number;\n    rest: number;\n}\n\ninterface Status {\n    time: number;\n    state: 'Active' | 'Rest';\n    set: number;\n    complete: boolean;\n    next: (time: number) => Status;\n}\n\nfunction SecondsInput({value, onChange}: InputProps) {\n    return (\n        <input type=\"number\"\n               value={value / 1000}\n               min={1}\n               onChange={e => onChange(Number(e.target.value) * 1000)}/>\n    )\n}\n\nconst buildStatus = (currentTime: number, {active, rest, sets}: Activity): Status => {\n    const setTime = active + rest;\n    const remainder = currentTime % setTime\n    const set = Math.floor(currentTime / setTime) + 1\n    const inActivePhase = remainder <= active;\n    return {\n        time: active - remainder + (inActivePhase ? 0 : rest),\n        state: inActivePhase ? 'Active' : 'Rest',\n        complete: sets + 1 === set,\n        set,\n        next: (nextTime) => buildStatus(currentTime + nextTime, {active, rest, sets})\n    }\n}\n\nconst defaultActivity = {\n    sets: 15,\n    active: 10000,\n    rest: 20000,\n};\n\nconst defaultStatus = buildStatus(0, defaultActivity);\n\nfunction App() {\n    const [running, setRunning] = useState(false);\n    const [paused, setPaused] = useState(false);\n    const [activity, setActivity] = useState(defaultActivity)\n    const [status, setStatus] = useState(defaultStatus);\n\n    const inActivity = running || paused;\n\n    const stop = () => {\n        setStatus(defaultStatus);\n        setPaused(false);\n        setRunning(false);\n    }\n\n    useEffect(() => {\n        if (status.complete) {\n            stop();\n            return;\n        }\n\n        if (running) {\n            const intervalId = setTimeout(() => {\n                setStatus(status => status.next(interval))\n            }, interval);\n            return () => clearTimeout(intervalId);\n        }\n\n        return;\n    }, [running, status])\n\n    const toggle = () => {\n        if (inActivity) {\n            stop();\n        } else {\n            setRunning(true);\n        }\n    }\n\n    const updateActivity = (activity: Activity) => {\n        setStatus(buildStatus(0, activity));\n        setActivity(activity);\n    }\n\n    const togglePause = () => {\n        setPaused(!paused);\n        setRunning(!running);\n    }\n\n    const {active, rest, sets} = activity;\n\n    const {time, state, set} = status;\n\n    return (\n        <div className={`App`}>\n            <div className={`App-header ${inActivity ? state : ''}`}>\n                <div className=\"Time\">{moment(time).format(\"mm:ss\")}</div>\n                <div className=\"Set\">{set}/{sets}</div>\n            </div>\n            <button onClick={toggle}>{inActivity ? 'Stop' : 'Start'}</button>\n            {inActivity && <button onClick={togglePause}>{paused ? 'Resume' : 'Pause'}</button>}\n            {!inActivity && <>\n                Sets <input type=\"number\"\n                            value={sets}\n                            min={1}\n                            onChange={e => updateActivity({sets: Number(e.target.value), active, rest})}/>\n                Active <SecondsInput value={active} onChange={value => updateActivity({active: value, sets, rest})}/>\n                Rest <SecondsInput value={rest} onChange={value => updateActivity({rest: value, active, sets})}/>\n            </>}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}